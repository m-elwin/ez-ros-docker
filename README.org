* Docker Interactive
Used to make existing docker containers more suitable for interactive use.
The goal is to make running programs in the docker container be as close to the host user experience as possible:
this means operating with the same user and group ids as the host user, seeing all devices on the host machine,
and being accessible via the host's network settings.

Initially, this was used by me to do ROS development on non-Ubuntu machines with minimal differences between
that experience and running ROS natively on Ubuntu. A shared directory allows editing of all files using host tools.


* Example Usage
1. Example workflow [Added by Rico]
 - go to your Dockerfile direcotory, run your Dockerfile to download all dependencies =$docker build tag IMAGE_TAG PATH_TO_DOCKER_FILE=
 - go to dockint directory
 - build your image using =dockint from=: =./dockint from IMAGE_TAG=
 - build your interactive container and create a new bash session, using =dockint run IMAGE_TAG bash=
 - optional: If you'd like to open a new terminal session for the same container, simply do =dockint run IMAGE_TAG bash= 
 - Now you can start working in the bash container, whose home directory is /home/user_name/IMAGE_TAG on the local machine.  
 
2. ~./dockint from ros:noetic bash~
   - This will build ~ros:noetic~ container from dockerhub, prompt you to create a home directory on the host (default to image name =~/ros:noetic=), and launch bash.
   - The contents of ~/ros:noetic~ are mounted to the home directory in the container.
3. Run =./dockint= with no arguments to print usage information. 

* Features
1. Simple script to build the image, launch the container, and run commands in it
2. Runs as your user id inside the container
3. Enables launching of X Windows from within the container
4. The docker container is run in privileged mode and accesses all the host devices
   - This lets you experiment with, for example, plugging/unplugging USB serial devices
   - You are not root in the container.
   - However, users with access to the docker daemon can of course run the container as root if they want to.
5. Use host networking to enable transparent network access.
   - Allows you to run =rosmaster= within the docker container and have remote nodes find the master
     using your host's networking setup.


